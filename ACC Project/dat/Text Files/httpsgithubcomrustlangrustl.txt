GitHub - rust-lang/rust: Empowering everyone to build reliable and efficient software. Skip to content Sign up Product Features Mobile Actions Codespaces Packages Security Code review Issues Integrations GitHub Sponsors Customer stories Team Enterprise Explore Explore GitHub Learn and contribute Topics Collections Trending Learning Lab Open source guides Connect with others The ReadME Project Events Community forum GitHub Education GitHub Stars program Marketplace Pricing Plans Compare plans Contact Sales Education In this repository All GitHub ? Jump to ? No suggested jump to results In this repository All GitHub ? Jump to ? In this organization All GitHub ? Jump to ? In this repository All GitHub ? Jump to ? Sign in Sign up {{ message }} rust-lang / rust Public Notifications Fork 9k Star 65k Empowering everyone to build reliable and efficient software. www.rust-lang.org View license 65k stars 9k forks Star Notifications Code Issues 5k+ Pull requests 503 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository. master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags 6 branches 105 tags Code Latest commit bors Auto merge of #95326 - lupd:std-iter-doc, r=Dylan-DPC ? 1fca19c Mar 26, 2022 Auto merge of #95326 - lupd:std-iter-doc, r=Dylan-DPC Remove mention of `HashMap<K, V>` not offering `iter_mut`

HashMap<K, V> does offer iter_mut. Fixes #94755.

r? rust-lang/libs
`@rustbot` label +A-docs +T-libs 1fca19c Git stats 165,103 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time .github Move submodule checkout before msys2 installation. Mar 1, 2022 compiler Auto merge of #95296 - workingjubilee:pretty-session, r=Dylan-DPC Mar 26, 2022 library Auto merge of #95326 - lupd:std-iter-doc, r=Dylan-DPC Mar 26, 2022 src Auto merge of #95299 - mkroening:rm-hermitkernel, r=joshtriplett Mar 26, 2022 .editorconfig Add .editorconfig Feb 2, 2021 .gitattributes Remove rustfmt tests from top-level .gitattributes Jun 4, 2021 .gitignore Add package.json in gitignore Feb 1, 2022 .gitmodules Update to LLVM 14.0.0 final Mar 23, 2022 .mailmap deduplicate lcnr in mailmap Feb 8, 2022 CODE_OF_CONDUCT.md Remove the code of conduct; instead link https://www.rust-lang.org/co? Oct 5, 2019 CONTRIBUTING.md Give people a single link they can click in the contributing guide Nov 22, 2021 COPYRIGHT Rebase to the llvm-project monorepo Jan 25, 2019 Cargo.lock upgrade chalk Mar 23, 2022 Cargo.toml Allow cargo run instead of cargo run -p bootstrap Mar 10, 2022 LICENSE-APACHE Remove appendix from LICENCE-APACHE Dec 30, 2019 LICENSE-MIT LICENSE-MIT: Remove inaccurate (misattributed) copyright notice Jul 26, 2017 README.md Give people a single link they can click in the contributing guide Nov 22, 2021 RELEASES.md all: fix some typos Mar 3, 2022 config.toml.example bootstrap: untangle static-libstdcpp & llvm-tools Mar 11, 2022 configure Enforce Python 3 as much as possible Apr 10, 2020 rustfmt.toml Enforce formatting for rustc_codegen_cranelift Jan 1, 2022 triagebot.toml Add a team for '@rustbot ping fuchsia' Mar 3, 2022 x.py Choose the version of python at runtime (portable version) Jan 15, 2021 View code The Rust Programming Language Quick Start Installing from Source Building on a Unix-like system Building on Windows MinGW MSVC Specifying an ABI Configure and Make Building Documentation Notes Getting Help Contributing License Trademark README.md The Rust Programming Language This is the main source code repository for Rust. It contains the compiler, standard library, and documentation. Note: this README is for users rather than contributors. If you wish to contribute to the compiler, you should read the Getting Started section of the rustc-dev-guide instead. You can ask for help in the #new members Zulip stream. Quick Start Read "Installation" from The Book. Installing from Source The Rust build system uses a Python script called x.py to build the compiler, which manages the bootstrapping process. It lives in the root of the project. The x.py command can be run directly on most systems in the following format: ./x.py <subcommand> [flags] This is how the documentation and examples assume you are running x.py. Systems such as Ubuntu 20.04 LTS do not create the necessary python command by default when Python is installed that allows x.py to be run directly. In that case you can either create a symlink for python (Ubuntu provides the python-is-python3 package for this), or run x.py using Python itself: # Python 3
python3 x.py <subcommand> [flags]

# Python 2.7
python2.7 x.py <subcommand> [flags] More information about x.py can be found by running it with the --help flag or reading the rustc dev guide. Building on a Unix-like system Make sure you have installed the dependencies: g++ 5.1 or later or clang++ 3.5 or later python 3 or 2.7 GNU make 3.81 or later cmake 3.13.4 or later ninja curl git ssl which comes in libssl-dev or openssl-devel pkg-config if you are compiling on Linux and targeting Linux Clone the source with git: git clone https://github.com/rust-lang/rust.git
cd rust Configure the build settings: The Rust build system uses a file named config.toml in the root of the source tree to determine various configuration settings for the build. Copy the default config.toml.example to config.toml to get started. cp config.toml.example config.toml If you plan to use x.py install to create an installation, it is recommended that you set the prefix value in the [install] section to a directory. Create install directory if you are not installing in default directory Build and install: ./x.py build && ./x.py install When complete, ./x.py install will place several programs into $PREFIX/bin: rustc, the Rust compiler, and rustdoc, the API-documentation tool. This install does not include Cargo, Rust's package manager. To build and install Cargo, you may run ./x.py install cargo or set the build.extended key in config.toml to true to build and install all tools. Building on Windows There are two prominent ABIs in use on Windows: the native (MSVC) ABI used by Visual Studio, and the GNU ABI used by the GCC toolchain. Which version of Rust you need depends largely on what C/C++ libraries you want to interoperate with: for interop with software produced by Visual Studio use the MSVC build of Rust; for interop with GNU software built using the MinGW/MSYS2 toolchain use the GNU build. MinGW MSYS2 can be used to easily build Rust on Windows: Grab the latest MSYS2 installer and go through the installer. Run mingw32_shell.bat or mingw64_shell.bat from wherever you installed MSYS2 (i.e. C:\msys64), depending on whether you want 32-bit or 64-bit Rust. (As of the latest version of MSYS2 you have to run msys2_shell.cmd -mingw32 or msys2_shell.cmd -mingw64 from the command line instead) From this terminal, install the required tools: # Update package mirrors (may be needed if you have a fresh install of MSYS2)
pacman -Sy pacman-mirrors

# Install build tools needed for Rust. If you're building a 32-bit compiler,
# then replace "x86_64" below with "i686". If you've already got git, python,
# or CMake installed and in PATH you can remove them from this list. Note
# that it is important that you do **not** use the 'python2', 'cmake' and 'ninja'
# packages from the 'msys2' subsystem. The build has historically been known
# to fail with these packages.
pacman -S git \
            make \
            diffutils \
            tar \
            mingw-w64-x86_64-python \
            mingw-w64-x86_64-cmake \
            mingw-w64-x86_64-gcc \
            mingw-w64-x86_64-ninja Navigate to Rust's source code (or clone it), then build it: ./x.py build && ./x.py install MSVC MSVC builds of Rust additionally require an installation of Visual Studio 2017 (or later) so rustc can use its linker. The simplest way is to get the Visual Studio, check the ?C++ build tools? and ?Windows 10 SDK? workload. (If you're installing cmake yourself, be careful that ?C++ CMake tools for Windows? doesn't get included under ?Individual components?.) With these dependencies installed, you can build the compiler in a cmd.exe shell with: python x.py build Currently, building Rust only works with some known versions of Visual Studio. If you have a more recent version installed and the build system doesn't understand, you may need to force rustbuild to use an older version. This can be done by manually calling the appropriate vcvars file before running the bootstrap. CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
python x.py build Specifying an ABI Each specific ABI can also be used from either environment (for example, using the GNU ABI in PowerShell) by using an explicit build triple. The available Windows build triples are: GNU ABI (using GCC) i686-pc-windows-gnu x86_64-pc-windows-gnu The MSVC ABI i686-pc-windows-msvc x86_64-pc-windows-msvc The build triple can be specified by either specifying --build=<triple> when invoking x.py commands, or by copying the config.toml file (as described in Installing From Source), and modifying the build option under the [build] section. Configure and Make While it's not the recommended build system, this project also provides a configure script and makefile (the latter of which just invokes x.py). ./configure
make && sudo make install When using the configure script, the generated config.mk file may override the config.toml file. To go back to the config.toml file, delete the generated config.mk file. Building Documentation If you?d like to build the documentation, it?s almost the same: ./x.py doc The generated documentation will appear under doc in the build directory for the ABI used. I.e., if the ABI was x86_64-pc-windows-msvc, the directory will be build\x86_64-pc-windows-msvc\doc. Notes Since the Rust compiler is written in Rust, it must be built by a precompiled "snapshot" version of itself (made in an earlier stage of development). As such, source builds require a connection to the Internet, to fetch snapshots, and an OS that can execute the available snapshot binaries. Snapshot binaries are currently built and tested on several platforms: Platform / Architecture x86 x86_64 Windows (7, 8, 10, ...) ? ? Linux (kernel 2.6.32, glibc 2.11 or later) ? ? macOS (10.7 Lion or later) (*) ? (*): Apple dropped support for running 32-bit binaries starting from macOS 10.15 and iOS 11. Due to this decision from Apple, the targets are no longer useful to our users. Please read our blog post for more info. You may find that other platforms work, but these are our officially supported build environments that are most likely to work. Getting Help The Rust community congregates in a few places: Stack Overflow - Direct questions about using the language. users.rust-lang.org - General discussion and broader questions. /r/rust - News and general discussion. Contributing If you are interested in contributing to the Rust project, please take a look at the Getting Started guide in the rustc-dev-guide. License Rust is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses. See LICENSE-APACHE, LICENSE-MIT, and COPYRIGHT for details. Trademark The Rust Foundation owns and protects the Rust and Cargo trademarks and logos (the ?Rust Trademarks?). If you want to use these names or brands, please read the media guide. Third-party logos may be subject to third-party copyrights and trademarks. See Licenses for details. About Empowering everyone to build reliable and efficient software. www.rust-lang.org Topics language rust compiler Resources Readme License View license Code of conduct Code of conduct Stars 65k stars Watchers 1.5k watching Forks 9k forks Releases 96 Rust 1.59.0 Latest Feb 24, 2022 + 95 releases Used by 15 + 7 Contributors 3,690 + 3,679 contributors Languages Rust 97.9% Python 0.4% JavaScript 0.3% Shell 0.3% Makefile 0.3% C++ 0.3% Other 0.5% ? 2022 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can?t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.