Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeks Skip to content Tutorials Practice DS & Algo. Must Do Questions DSA Topic-wise DSA Company-wise Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Jobs Apply for Jobs Post a Job JOB-A-THON Events Courses Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Data Structures Algorithms Interview Preparation Topic-wise Practice C++ Java Python Competitive Programming Machine Learning Web Development SDE Sheet Puzzles GFG School Projects Related Articles ? Related Articles Algorithms Algorithms Introduction to Algorithms Difference between Algorithm, Pseudocode and Program Difference Between Algorithm and Flowchart Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of algorithms | little o and little omega notations Lower and Upper Bound Theory Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) What does ?Space Complexity? mean? Pseudo-polynomial Algorithms Searching and Sorting Interpolation search vs Binary search Stability in sorting algorithms When does the worst case of Quicksort occur? Lower bound for comparison based sorting algorithms Which sorting algorithm makes minimum number of memory writes? Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted Merge Sort for Linked Lists Sort a nearly sorted (or K sorted) array Iterative Quick Sort Greedy Algorithms Activity Selection Problem | Greedy Algo-1 Kruskal?s Minimum Spanning Tree Algorithm | Greedy Algo-2 Huffman Coding | Greedy Algo-3 Efficient Huffman Coding for Sorted Input | Greedy Algo-4 Prim?s Minimum Spanning Tree (MST) | Greedy Algo-5 Prim?s MST for Adjacency List Representation | Greedy Algo-6 Dijkstra?s shortest path algorithm | Greedy Algo-7 Dijkstra?s Algorithm for Adjacency List Representation | Greedy Algo-8 Job Sequencing Problem Dynamic Programming Overlapping Subproblems Property in Dynamic Programming | DP-1 Optimal Substructure Property in Dynamic Programming | DP-2 Longest Increasing Subsequence | DP-3 Longest Common Subsequence | DP-4 Edit Distance | DP-5 Min Cost Path | DP-6 Coin Change | DP-7 Matrix Chain Multiplication | DP-8 Binomial Coefficient | DP-9 0-1 Knapsack Problem | DP-10 Dynamic Programming Pattern Searching Naive algorithm for Pattern Searching KMP Algorithm for Pattern Searching Rabin-Karp Algorithm for Pattern Searching Optimized Naive Algorithm for Pattern Searching Finite Automata algorithm for Pattern Searching Pattern Searching | Set 6 (Efficient Construction of Finite Automata) Boyer Moore Algorithm for Pattern Searching Suffix Array | Set 1 (Introduction) Anagram Substring Search (Or Search for all permutations) Pattern Searching using a Trie of all Suffixes Pattern Searching Other String Algorithms Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 1 Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 2 Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 3 Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 4 Longest Even Length Substring such that Sum of First and Second Half is same Print all possible strings that can be made by placing spaces Backtracking Write a program to print all permutations of a given string The Knight?s tour problem | Backtracking-1 Rat in a Maze | Backtracking-2 N Queen Problem | Backtracking-3 Subset Sum | Backtracking-4 m Coloring Problem | Backtracking-5 Hamiltonian Cycle | Backtracking-6 Sudoku | Backtracking-7 Tug of War Solving Cryptarithmetic Puzzles | Backtracking-8 Divide and Conquer Divide and Conquer Algorithm | Introduction Write a program to calculate pow(x,n) Median of two sorted arrays of same size Count Inversions in an array | Set 1 (Using Merge Sort) Closest Pair of Points using Divide and Conquer algorithm Divide and Conquer | Set 5 (Strassen?s Matrix Multiplication) Quick Sort vs Merge Sort Divide and Conquer Geometric Algorithms Closest Pair of Points | O(nlogn) Implementation How to check if two given line segments intersect? How to check if a given point lies inside or outside a polygon? Convex Hull | Set 1 (Jarvis?s Algorithm or Wrapping) Convex Hull | Set 2 (Graham Scan) Given n line segments, find if any two segments intersect Check whether a given point lies inside a triangle or not How to check if given four points form a square Mathematical Algorithms Write an Efficient Method to Check if a Number is Multiple of 3 Efficient way to multiply with 7 Lucky Numbers Write a program to add two numbers in base 14 Babylonian method for square root Multiply two integers without using multiplication, division and bitwise operators, and no loops Print all combinations of points that can compose a given number Write you own Power without using multiplication(*) and division(/) operators Program for Fibonacci numbers Bit Algorithms Find the element that appears once Detect if two integers have opposite signs Count total set bits in all numbers from 1 to n Swap bits in a given number Add two numbers without using arithmetic operators Smallest of three integers without comparison operators A Boolean Array Puzzle Program to count number of set bits in an (big) array Next higher number with same number of set bits Optimization Techniques | Set 1 (Modulus) Graph Algorithms Graph and its representations Breadth First Search or BFS for a Graph Depth First Search or DFS for a Graph Applications of Depth First Search Detect Cycle in a Directed Graph Disjoint Set (Or Union-Find) | Set 1 (Detect Cycle in an Undirected Graph) Detect cycle in an undirected graph Longest Path in a Directed Acyclic Graph Topological Sorting Check whether a given graph is Bipartite or not Randomized Algorithms Linearity of Expectation Expected Number of Trials until Success Randomized Algorithms | Set 0 (Mathematical Background) Randomized Algorithms | Set 1 (Introduction and Analysis) Randomized Algorithms | Set 2 (Classification and Applications) Randomized Algorithms | Set 3 (1/2 Approximate Median) Karger?s algorithm for Minimum Cut | Set 1 (Introduction and Implementation) K?th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) Reservoir Sampling Shuffle a given array using Fisher?Yates shuffle Algorithm Branch and Bound 0/1 Knapsack using Branch and Bound Implementation of 0/1 Knapsack using Branch and Bound 8 puzzle Problem using Branch And Bound Job Assignment Problem using Branch And Bound N Queen Problem using Branch And Bound Traveling Salesman Problem using Branch And Bound Quizzes on Algorithms Analysis of Algorithms Sorting Divide and Conquer Dynamic Programming Backtracking Algorithm Misc NP Complete Searching Analysis of Algorithms (Recurrences) Table of Contents Algorithms Algorithms Introduction to Algorithms Difference between Algorithm, Pseudocode and Program Difference Between Algorithm and Flowchart Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of algorithms | little o and little omega notations Lower and Upper Bound Theory Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) What does ?Space Complexity? mean? Pseudo-polynomial Algorithms Searching and Sorting Interpolation search vs Binary search Stability in sorting algorithms When does the worst case of Quicksort occur? Lower bound for comparison based sorting algorithms Which sorting algorithm makes minimum number of memory writes? Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted Merge Sort for Linked Lists Sort a nearly sorted (or K sorted) array Iterative Quick Sort Greedy Algorithms Activity Selection Problem | Greedy Algo-1 Kruskal?s Minimum Spanning Tree Algorithm | Greedy Algo-2 Huffman Coding | Greedy Algo-3 Efficient Huffman Coding for Sorted Input | Greedy Algo-4 Prim?s Minimum Spanning Tree (MST) | Greedy Algo-5 Prim?s MST for Adjacency List Representation | Greedy Algo-6 Dijkstra?s shortest path algorithm | Greedy Algo-7 Dijkstra?s Algorithm for Adjacency List Representation | Greedy Algo-8 Job Sequencing Problem Dynamic Programming Overlapping Subproblems Property in Dynamic Programming | DP-1 Optimal Substructure Property in Dynamic Programming | DP-2 Longest Increasing Subsequence | DP-3 Longest Common Subsequence | DP-4 Edit Distance | DP-5 Min Cost Path | DP-6 Coin Change | DP-7 Matrix Chain Multiplication | DP-8 Binomial Coefficient | DP-9 0-1 Knapsack Problem | DP-10 Dynamic Programming Pattern Searching Naive algorithm for Pattern Searching KMP Algorithm for Pattern Searching Rabin-Karp Algorithm for Pattern Searching Optimized Naive Algorithm for Pattern Searching Finite Automata algorithm for Pattern Searching Pattern Searching | Set 6 (Efficient Construction of Finite Automata) Boyer Moore Algorithm for Pattern Searching Suffix Array | Set 1 (Introduction) Anagram Substring Search (Or Search for all permutations) Pattern Searching using a Trie of all Suffixes Pattern Searching Other String Algorithms Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 1 Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 2 Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 3 Manacher?s Algorithm ? Linear Time Longest Palindromic Substring ? Part 4 Longest Even Length Substring such that Sum of First and Second Half is same Print all possible strings that can be made by placing spaces Backtracking Write a program to print all permutations of a given string The Knight?s tour problem | Backtracking-1 Rat in a Maze | Backtracking-2 N Queen Problem | Backtracking-3 Subset Sum | Backtracking-4 m Coloring Problem | Backtracking-5 Hamiltonian Cycle | Backtracking-6 Sudoku | Backtracking-7 Tug of War Solving Cryptarithmetic Puzzles | Backtracking-8 Divide and Conquer Divide and Conquer Algorithm | Introduction Write a program to calculate pow(x,n) Median of two sorted arrays of same size Count Inversions in an array | Set 1 (Using Merge Sort) Closest Pair of Points using Divide and Conquer algorithm Divide and Conquer | Set 5 (Strassen?s Matrix Multiplication) Quick Sort vs Merge Sort Divide and Conquer Geometric Algorithms Closest Pair of Points | O(nlogn) Implementation How to check if two given line segments intersect? How to check if a given point lies inside or outside a polygon? Convex Hull | Set 1 (Jarvis?s Algorithm or Wrapping) Convex Hull | Set 2 (Graham Scan) Given n line segments, find if any two segments intersect Check whether a given point lies inside a triangle or not How to check if given four points form a square Mathematical Algorithms Write an Efficient Method to Check if a Number is Multiple of 3 Efficient way to multiply with 7 Lucky Numbers Write a program to add two numbers in base 14 Babylonian method for square root Multiply two integers without using multiplication, division and bitwise operators, and no loops Print all combinations of points that can compose a given number Write you own Power without using multiplication(*) and division(/) operators Program for Fibonacci numbers Bit Algorithms Find the element that appears once Detect if two integers have opposite signs Count total set bits in all numbers from 1 to n Swap bits in a given number Add two numbers without using arithmetic operators Smallest of three integers without comparison operators A Boolean Array Puzzle Program to count number of set bits in an (big) array Next higher number with same number of set bits Optimization Techniques | Set 1 (Modulus) Graph Algorithms Graph and its representations Breadth First Search or BFS for a Graph Depth First Search or DFS for a Graph Applications of Depth First Search Detect Cycle in a Directed Graph Disjoint Set (Or Union-Find) | Set 1 (Detect Cycle in an Undirected Graph) Detect cycle in an undirected graph Longest Path in a Directed Acyclic Graph Topological Sorting Check whether a given graph is Bipartite or not Randomized Algorithms Linearity of Expectation Expected Number of Trials until Success Randomized Algorithms | Set 0 (Mathematical Background) Randomized Algorithms | Set 1 (Introduction and Analysis) Randomized Algorithms | Set 2 (Classification and Applications) Randomized Algorithms | Set 3 (1/2 Approximate Median) Karger?s algorithm for Minimum Cut | Set 1 (Introduction and Implementation) K?th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) Reservoir Sampling Shuffle a given array using Fisher?Yates shuffle Algorithm Branch and Bound 0/1 Knapsack using Branch and Bound Implementation of 0/1 Knapsack using Branch and Bound 8 puzzle Problem using Branch And Bound Job Assignment Problem using Branch And Bound N Queen Problem using Branch And Bound Traveling Salesman Problem using Branch And Bound Quizzes on Algorithms Analysis of Algorithms Sorting Divide and Conquer Dynamic Programming Backtracking Algorithm Misc NP Complete Searching Analysis of Algorithms (Recurrences) Improve Article Save Article Like Article Analysis of Algorithms | Set 1 (Asymptotic Analysis) Difficulty Level : Basic Last Updated : 09 Nov, 2020 Why performance analysis? There are many important things that should be taken care of, like user friendliness, modularity, security, maintainability, etc. Why to worry about performance? The answer to this is simple, we can have all the above things only if we have performance. So performance is like currency through which we can buy all the above things. Another reason for studying performance is ? speed is fun! To summarize, performance == scale. Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR ? you get it. If a software feature can not cope with the scale of tasks users need to perform ? it is as good as dead. Given two algorithms for a task, how do we find out which one is better? One naive way of doing this is ? implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for analysis of algorithms. 1) It might be possible that for some inputs, first algorithm performs better than the second. And for some inputs second performs better. 2) It might also be possible that for some inputs, first algorithm perform better on one machine and the second works better on other machine for some other inputs. Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don?t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size. For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let?s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size. Here are some running times for this example: Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) 
------------------------------------------------
|n      | Running time on A | Running time on B |
-------------------------------------------------
|10     | 2 sec             | ~ 1 h             |
-------------------------------------------------
|100    | 20 sec            | ~ 1.8 h           |
-------------------------------------------------
|10^6   | ~ 55.5 h          | ~ 5.5 h           |
-------------------------------------------------
|10^9   | ~ 6.3 years       | ~ 8.3 h           |
-------------------------------------------------
 Does Asymptotic Analysis always work? Asymptotic Analysis is not perfect, but that?s the best way available for analyzing algorithms. For example, say there are two sorting algorithms that take 1000nLogn and 2nLogn time respectively on a machine. Both of these algorithms are asymptotically same (order of growth is nLogn). So, With Asymptotic Analysis, we can?t judge which one is better as we ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. Next ? Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) References: MIT?s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Like Previous Difference Between Algorithm and Flowchart Next Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Recommended Articles Page : Analysis of Algorithms | Set 3 (Asymptotic Notations) 26, Oct 13 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Guidelines for asymptotic analysis 27, May 21 Properties of Asymptotic Notations 06, Sep 19 Asymptotic Notations and how to calculate them 11, Jul 21 Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Big-O analysis 28, Feb 18 Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) 23, Sep 14 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Analysis of algorithms | little o and little omega notations 14, Aug 17 Analysis of Algorithms | Big - ? (Big Theta) Notation 11, Jul 21 Analysis of Algorithms | Big - ? (Big- Omega) Notation 11, Jul 21 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 Practice Questions on Time Complexity Analysis 12, Dec 17 Analysis of different sorting techniques 29, Jan 18 Complexity Analysis of Binary Search 29, May 19 Difference between Posteriori and Priori analysis 07, Aug 19 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 What is algorithm and why analysis of it is important? 12, Jan 21 Prune-and-Search | A Complexity Analysis Overview 19, Jul 21 Examples of Big-O analysis 23, Nov 20 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Basic Easy Normal Medium Hard Expert Improved By : Danail Kozhuharov biplab_prasad BenceAment Article Tags : Analysis Articles Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation View Details System Design-Live Classes for Working Professionals View Details Most popular in Analysis Practice Questions on Time Complexity Analysis Time Complexity and Space Complexity Understanding Time Complexity with Simple Examples Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithms | Big-O analysis Most visited in Articles Tree Traversals (Inorder, Preorder and Postorder) SQL | Join (Inner, Left, Right and Full Joins) find command in Linux with examples Regular expressions in C Understanding "extern" keyword in C ? 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials News Top News Technology Work & Career Business Finance Lifestyle Languages Python Java CPP Golang C# SQL Web Development Web Tutorials Django Tutorial HTML CSS JavaScript Bootstrap Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register