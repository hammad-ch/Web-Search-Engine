Find edge to be deleted from Tree to maximise product of XOR of components - GeeksforGeeks Skip to content Tutorials Practice DS & Algo. Must Do Questions DSA Topic-wise DSA Company-wise Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Jobs Apply for Jobs Post a Job JOB-A-THON Events Courses Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Data Structures Algorithms Interview Preparation Topic-wise Practice C++ Java Python Competitive Programming Machine Learning Web Development SDE Sheet Puzzles GFG School Projects Related Articles ? Related Articles Bitwise Operators in C/C++ Left Shift and Right Shift Operators in C/C++ Count set bits in an integer Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Compute the integer absolute value (abs) without branching How to swap two numbers without using a temporary variable? Program to find whether a given number is power of 2 Binary representation of a given number Josephus problem | Set 1 (A O(n) Solution) Little and Big Endian Mystery Cyclic Redundancy Check and Modulo-2 Division Add two numbers without using arithmetic operators Rotate bits of a number Find the element that appears once Bits manipulation (Important tactics) C++ bitset and its application Find the Number Occurring Odd Number of Times Divide two integers without using multiplication, division and mod operator Count total set bits in all numbers from 1 to n 1's and 2's complement of a Binary Number Bit Fields in C Find the two non-repeating elements in an array of repeating elements/ Unique Numbers 2 Find most significant set bit of a number Bitwise Right Shift Operators in Java Operators in C | Set 2 (Relational and Logical Operators) Position of rightmost set bit Rotate bits of a number Calculate XOR from 1 to n. Determine if a string has all Unique Characters Write an Efficient C Program to Reverse Bits of a Number Table of Contents Bitwise Operators in C/C++ Left Shift and Right Shift Operators in C/C++ Count set bits in an integer Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Compute the integer absolute value (abs) without branching How to swap two numbers without using a temporary variable? Program to find whether a given number is power of 2 Binary representation of a given number Josephus problem | Set 1 (A O(n) Solution) Little and Big Endian Mystery Cyclic Redundancy Check and Modulo-2 Division Add two numbers without using arithmetic operators Rotate bits of a number Find the element that appears once Bits manipulation (Important tactics) C++ bitset and its application Find the Number Occurring Odd Number of Times Divide two integers without using multiplication, division and mod operator Count total set bits in all numbers from 1 to n 1's and 2's complement of a Binary Number Bit Fields in C Find the two non-repeating elements in an array of repeating elements/ Unique Numbers 2 Find most significant set bit of a number Bitwise Right Shift Operators in Java Operators in C | Set 2 (Relational and Logical Operators) Position of rightmost set bit Rotate bits of a number Calculate XOR from 1 to n. Determine if a string has all Unique Characters Write an Efficient C Program to Reverse Bits of a Number Improve Article Save Article Like Article Find edge to be deleted from Tree to maximise product of XOR of components Last Updated : 24 Mar, 2022 Given a tree of having N nodes rooted at node 0, and an array val[] denoting the value at each node, the task is to find the maximum possible product of XOR of connected components after removing one edge from the tree and also the edge which is removed. Note: If there are multiple edges that give the maximum value then print them all in any order. Examples: Input: edges[][] = { {0, 5}, {0, 4}, {5, 1}, {5, 3}, {5, 2} }, val[ ] = { 7, 15, 9, 1, 1, 12} Output: max_xor_product = 66 Edges: {0, 5} Explanation: If we delete an edge {0, 5} then the tree will divide into two components. The XOR of the first component is (1^7) = 6. And the XOR of the second component is ( 12^15^1^9) = 11. The product of xor of those components is ( 6*11) = 66. Similarly, if we delete an edge { 5, 1} tree again divide into two-component. The XOR of the first component is ( 15 ) ( because it has only one node) and XOR of the second component is ( 7^1^12^9^1) = 2. And the product of XOR of those components is ( 15 * 2 ) = 30. If this is repeated the maximum value of the product of XOR of components will be 66, which can be achieved if we delete the edge {0, 5}. See the image below to understand it better Input: edges[][] = { {0, 1}, {0, 2}}, val[ ]={ 17, 17, 17} Output: max_xor_product = 0 Edges: {{0, 1}, {0, 2}} Naive Approach: Delete each edge and traverse through components and take xor of values of nodes in those components, then do the product of xor, store the maximum value and the edge corresponding to that value. Time Complexity: O(N*N) Auxiliary Space: O(N) Efficient Method: This problem can be solved by precomputing XOR of subtree of each node and using bitwise XOR property as follows: If an edge of a tree is deleted, then the tree will always divide into two components. The XOR of one component will be same as the XOR of the subtree (say X) and the other component will have XOR = (total XOR of all nodes ^ X). For each edge, consider it to be removed and then find the XOR of both the components (using above observation) and their product. Keep track of the maximum and removing which edge results in that. Follow the illustration shown below for a better understanding. Illustration: Consider the first example given below edges[][] = { {0, 5}, {0, 4}, {5, 1}, {5, 3}, {5, 2} }, val[ ] = { 7, 15, 9, 1, 1, 12} Remove edge {0, 4}: => Two components are {1} and {7, 12, 15, 1, 9} => XOR values are 1 and 12 => Product = 1*12 = 12 Remove edge {0, 5}: => Two components are {1, 7} and {12, 15, 1, 9} => XOR values are 6 and 11 => Product = 6*11 = 66 Remove edge {5, 1}: => Two components are {1, 7, 12, 1, 9} and {15} => XOR values are 2 and 15 => Product = 2*15 = 30 Remove edge {5, 2}: => Two components are {1, 7, 12, 15, 1} and {9} => XOR values are 4 and 9 => Product = 4*9 = 36 Remove edge {5, 3}: => Two components are {1, 7, 12, 15, 9} and {1} => XOR values are 1 and 12 => Product = 1*12 = 12 So the maximum value is 66 which is achieved when the edge {0, 5} is removed Follow the below steps to solve this problem: Calculate the XOR of all given values of all tree nodes (say tot_xor) Create an array (say subtree_xor[])and store the bitwise xor of the subtree of ith node using DFS. Now travel through the tree using DFS and for each node: Consider the edge between current node and its parent is removed. The two components will be: current node with its subtree and the remaining of the tree. Calculate the bitwise xor of current node with its subtree and of the remaining tree as mentioned in the above observation. Find the product of the XOR values. Update maximum value and removed edges accordingly. Return the maximum value and the removed edges. Below is the implementation of the above approach: C++ // C++ code to implement the approach #include <bits/stdc++.h> using namespace std; const int mxx = 1e6 + 7; int subtree_xor[mxx]; unordered_map<long long, vector<pair<int, int> > > store; // To add edges in tree void addEdge(vector<int> tree[], int u, int v) { tree[u].push_back(v); tree[v].push_back(u); } // To precompute xor value of each subtree void dfs(vector<int> tree[], int val[], int cur_node, int par) { // assign value of current node subtree_xor[cur_node] = val[cur_node]; for (auto& child : tree[cur_node]) { if (child == par) continue; dfs(tree, val, child, cur_node); // take xor of all child node subtree_xor[cur_node] ^= subtree_xor[child]; } } // To store all xor_product // and it's corresponding edges void store_xor_product(vector<int> tree[], int cur_node, int par, int tot_xor) { for (auto& child : tree[cur_node]) { if (child == par) continue; // Xor of first component int first_comp_xor = subtree_xor[child]; // Xor of second component int second_comp_xor = tot_xor ^ first_comp_xor; // Product can exceed int range // so store it in long long data type long long xor_product = first_comp_xor * 1LL * second_comp_xor; // Strore edges corresponding // to its product store[xor_product].push_back({ cur_node, child }); store_xor_product(tree, child, cur_node, tot_xor); } } // To print edges corresponding // to max_xor_product of components void print_edges(long long mx_product) { for (auto edges : store[mx_product]) { cout << edges.first << " " << edges.second << "\n"; } } // Driver code int findVal(int N, int val[], vector<vector<int> >& edges) { int tot_xor = 0; // Stote the xor of all values for (int i = 0; i < N; i++) tot_xor ^= val[i]; vector<int> tree[N]; // Create a tree from given edges for (int i = 0; i < N - 1; i++) addEdge(tree, edges[i][0], edges[i][1]); // Dfs travel to store subtree xor dfs(tree, val, 0, -1); // To store edges corresponding // to xor_product store_xor_product(tree, 0, -1, tot_xor); // Find maxmimum xor_product long long mx_product = -1; for (auto ele : store) { long long cur_product = ele.first; mx_product = max(mx_product, cur_product); } return mx_product; } // Driver code int main() { int N = 6; vector<vector<int> > edges = { { 0, 5 }, { 0, 4 }, { 5, 1 }, { 5, 3 }, { 5, 2 } }; int val[] = { 7, 15, 9, 1, 1, 12 }; int mx_product = findVal(N, val, edges); cout << mx_product << "\n"; // To print edges corresponding // to maximum xor_product print_edges(mx_product); return 0; } Output 66
0 5
 Time Complexity: O( N ) Auxiliary Space: O( N ) My Personal Notes arrow_drop_up Save Like Previous Maximize Array sum by subtracting absolute of odd and adding absolute of even elements Next Count of possible remainders for K in given ranges for Q queries Recommended Articles Page : Difference between Tree edge and Back edge in graph 12, Jan 21 Maximise sum of product of pairs by choosing subsequence of same length from given Arrays 08, Mar 22 Product of minimum edge weight between all pairs of a Tree 14, Aug 19 Count of subarrays in range [L, R] having XOR + 1 equal to XOR (XOR) 1 for M queries 26, Oct 21 Queries to find the count of shortest paths in a Tree that contains a given edge 07, Sep 20 Minimize first node of Linked List by deleting first or adding one deleted node at start 22, Mar 22 Maximise length of smallest group by dividing Binary String into K groups of same bit 08, Mar 22 Check if removing an edge can divide a Binary Tree in two halves 26, Mar 16 Maximum edge removal from tree to make even forest 20, Mar 17 Maximum Possible Edge Disjoint Spanning Tree From a Complete Graph 05, Oct 18 Maximum weighted edge in path between two nodes in an N-ary tree using binary lifting 22, May 20 Count number of times each Edge appears in all possible paths of a given Tree 24, Aug 20 Tree, Back, Edge and Cross Edges in DFS of Graph 08, Oct 18 Find XOR of two number without using XOR operator 21, Oct 15 Given a set, find XOR of the XOR's of all subsets. 27, Dec 15 Find the maximum component size after addition of each edge to the graph 08, May 20 Queries to count connected components after removal of a vertex from a Tree 16, Sep 20 Check if a Tree can be split into K equal connected components 30, Mar 20 Construct XOR tree by Given leaf nodes of Perfect Binary Tree 13, Jan 20 Count of integers K in range [0, N] such that (K XOR K+1) equals (K+2 XOR K+3) 06, Jul 21 Choose X such that (A xor X) + (B xor X) is minimized 03, May 19 Bitwise XOR of same indexed array elements after rearranging an array to make XOR of same indexed elements of two arrays equal 05, Aug 21 Maximize count of pairs whose bitwise XOR is even by replacing such pairs with their Bitwise XOR 22, Feb 21 Count of node sequences of length K consisting of at least one black edge 20, Jun 20 Article Contributed By : GeeksforGeeks Vote for difficulty Easy Normal Medium Hard Expert Article Tags : Bitwise-XOR DFS Geeks-Premier-League-2022 Bit Magic Geeks Premier League Tree Practice Tags : Bit Magic DFS Tree Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation View Details System Design-Live Classes for Working Professionals View Details Most popular in Bit Magic Set, Clear and Toggle a given bit of a number in C Highest power of 2 less than or equal to given number Check whether K-th bit is set or not Count total bits in a number Write an Efficient Method to Check if a Number is Multiple of 3 Most visited in Geeks Premier League Best Way To Start Learning Core Java ? A Complete Roadmap 10 Tips For Landing Your Dream Internship Java Developer Learning Path ? A Complete Roadmap Implement Nested Routes in React.js - React Router DOM V6 Dagger Hilt in Android with Example ? 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials News Top News Technology Work & Career Business Finance Lifestyle Languages Python Java CPP Golang C# SQL Web Development Web Tutorials Django Tutorial HTML CSS JavaScript Bootstrap Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register