Count of possible remainders for K in given ranges for Q queries - GeeksforGeeks Skip to content Tutorials Practice DS & Algo. Must Do Questions DSA Topic-wise DSA Company-wise Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Jobs Apply for Jobs Post a Job JOB-A-THON Events Courses Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Data Structures Algorithms Interview Preparation Topic-wise Practice C++ Java Python Competitive Programming Machine Learning Web Development SDE Sheet Puzzles GFG School Projects Related Articles ? Related Articles Arrays in Java Write a program to reverse an array or string Largest Sum Contiguous Subarray Program for array rotation Arrays in C/C++ Stack Data Structure (Introduction and Program) Top 50 Array Coding Problems for Interviews Given an array A[] and a number x, check for pair in A[] with sum as x (aka Two Sum) Linear Search Maximum and minimum of an array using minimum number of comparisons K'th Smallest/Largest Element in Unsorted Array | Set 1 Multidimensional Arrays in Java Subset Sum Problem | DP-25 Python | Using 2D arrays/lists the right way Array of Strings in C++ (5 Different Ways to Create) Find the Missing Number Count Inversions in an array | Set 1 (Using Merge Sort) Queue | Set 1 (Introduction and Array Implementation) Search an element in a sorted and rotated array Write a program to reverse an array or string Linked List vs Array Program to find largest element in an array Sort an array of 0s, 1s and 2s Print a given matrix in spiral form Merge two sorted arrays Introduction to Arrays Given an array of size n and a number k, find all elements that appear more than n/k times Find Second largest element in an array k largest(or smallest) elements in an array Stock Buy Sell to Maximize Profit Table of Contents Arrays in Java Write a program to reverse an array or string Largest Sum Contiguous Subarray Program for array rotation Arrays in C/C++ Stack Data Structure (Introduction and Program) Top 50 Array Coding Problems for Interviews Given an array A[] and a number x, check for pair in A[] with sum as x (aka Two Sum) Linear Search Maximum and minimum of an array using minimum number of comparisons K'th Smallest/Largest Element in Unsorted Array | Set 1 Multidimensional Arrays in Java Subset Sum Problem | DP-25 Python | Using 2D arrays/lists the right way Array of Strings in C++ (5 Different Ways to Create) Find the Missing Number Count Inversions in an array | Set 1 (Using Merge Sort) Queue | Set 1 (Introduction and Array Implementation) Search an element in a sorted and rotated array Write a program to reverse an array or string Linked List vs Array Program to find largest element in an array Sort an array of 0s, 1s and 2s Print a given matrix in spiral form Merge two sorted arrays Introduction to Arrays Given an array of size n and a number k, find all elements that appear more than n/k times Find Second largest element in an array k largest(or smallest) elements in an array Stock Buy Sell to Maximize Profit Improve Article Save Article Like Article Count of possible remainders for K in given ranges for Q queries Difficulty Level : Expert Last Updated : 24 Mar, 2022 Given an array arr[ ] which contains N positive integers and an integer K and a vector of queries Q . Two types of queries can be asked: In the type 1 query, all elements from index l to r are increased by value X. The input format of this query: 1 l r x In the type 2 query, for a given integer K print the count of all possible remainders if elements from index l to r are divided by k. The input format of this query: 2 l r Examples: Input: arr[ ] = {7, 13, 5, 9, 16, 21}, K=4, vector< vector< int > >Q = { {2, 3, 5}, { 1, 0, 4, 1}, {2, 2, 5} } Output: 1 2 0 0 0 2 2 0 Explanation: The first query type is 2. so, for index 3 to 5, there is only one element => ( 16 ) whose remainder is 0 for given k=4. Two elements whose remainder is 1 => ( 9, 21 ). There is no element whose remainder is 2 or 3. After second query arr will be: {8, 14, 6, 10, 17, 21} . because of all array elements are increased by 1 . In the third query for index 2 to 5, there are two elements whose remainders are 1 (17, 21) and 2 (6, 10).There is no elements whose remainder is 0 or 3. Input: arr[ ] = {6, 7, 8, 9, 10, 11}, k=5, vector< vector< int > >Q = { {2, 1, 1 } {2, 1, 3}, { 1, 1, 3, 2}, {2, 1, 3} } Output: 0 0 1 0 0 0 0 1 1 1 1 1 0 0 1 Naive Approach: A simple approach is in update query just iterate through an array in a given range and update value. And for another type of query iterate through the given range and take mod with k, keep hash array to store particular count of that remainder. But time complexity of this method is O(N*Q*k) Time Complexity: O(N*Q*k) Auxiliary Space: O(k), for maintaining a hash array of size k Efficient Approach: The above approach can be optimized using segment tree and lazy propagation, based on below idea: Intuition: Here numbers of queries are high and there are queries also in which a range l to r has to be updated. Also we have to print answers for the given range l to r. So, these are giving hints to use segment tree with lazy propagation, because in this method we can answer each query in O( log(N) ) time i.e. ( Height of segment tree). Along with this, we will use lazy propagation to update the range values in an efficient manner, because in lazy propagation, we only update the node of the segment tree which is currently required and will propagate the value to the child node, and will update this child node, whenever it is required. To store this propagate value, Use an array named lazy (check code) Instead of a given value, Just update a range with val%k, because the main focus is remainder and this will not affect the answer. Use a 2D segment tree, so that each node of the segment tree contains an array of length K, to store the count of all possible remainders. Illustration: For arr[]={1, 2, 5}, k=4, segment tree looks like: so basically node segment[ ind ][ j ] will contain the count of elements whose remainder is j corresponding to a range covered by the indth index of the segment tree. In other words, if the indth index of segment tree cover range a to b of the array then segment[ ind ][ 0 ] represents, the count of elements whose remainder is 0 in range a to b. Similarly segment[ ind ][ j ] will represent the count of elements whose remainder is j for given K in range a to b. Here the main trick is if any range is updated by value x, then all elements of the array of length K which is attached with the segment tree?s node, will do the right cyclic shift by x%k positions. Suppose if any range values are increased by 1, it means count of elements whose remainder was 0 now it become count of elements whose remainder is 1. Before modifying that node, store the value in the temporary array. After that, modify the node of the segment tree by segment[ ind ][ (val+i)%k ]=temp[ i ] Below is the implementation of the above approach: C++ // C++ program for Find count of all // possible remainders for given integer K // in the given ranges for Q queries. #include <bits/stdc++.h> using namespace std; #define MXX 100001 // to store propagate value int lazy[4 * MXX]; int segment[4 * MXX][51]; int ans[51]; // build segment tree for given arr void build(int arr[], int low, int high, int ind, int k) { if (low == high) { int rem = arr[low] % k; // mark 1 at ind corresponding to remainder segment[ind][rem] = 1; return; } int mid = (low + high) >> 1; build(arr, low, mid, 2 * ind + 1, k); build(arr, mid + 1, high, 2 * ind + 2, k); // befor returning, compute answer for // all possible remainders for node ind for (int i = 0; i < k; i++) { segment[ind][i] = segment[2 * ind + 1][i] + segment[2 * ind + 2][i]; } } // to update a range l to r void update(int l, int r, int low, int high, int ind, int k, int val) { lazy[ind] %= k; // if any value is panding than update it if (lazy[ind] != 0) { if (low != high) { // propagate panding value to its children lazy[2 * ind + 1] += lazy[ind]; lazy[2 * ind + 2] += lazy[ind]; lazy[2 * ind + 1] %= k; lazy[2 * ind + 2] %= k; } int incr = lazy[ind]; // make temporary vector to store value // so we can perform cycle operation without // loosing actual values vector<int> temp(k); for (int i = 0; i < k; i++) { temp[i] = segment[ind][i]; } // do cyclic shift operation for (int i = 0; i < k; i++) { segment[ind][(incr + i) % k] = temp[i]; } // after done panding update mark it 0. lazy[ind] = 0; } // invalid range then return if (high < low || low > r || high < l) return; // the currant range is subset of // our actual range so update value if (low >= l && high <= r) { val %= k; vector<int> temp(k); for (int i = 0; i < k; i++) { temp[i] = segment[ind][i]; } for (int i = 0; i < k; i++) { segment[ind][(val + i) % k] = temp[i]; } if (low != high) { lazy[2 * ind + 1] += val; lazy[2 * ind + 2] += val; lazy[2 * ind + 1] %= k; lazy[2 * ind + 2] %= k; } return; } int mid = (low + high) >> 1; // go to left and right side update(l, r, low, mid, 2 * ind + 1, k, val); update(l, r, mid + 1, high, 2 * ind + 2, k, val); // after updating and before returning, // calculate answer for (int i = 0; i < k; i++) { segment[ind][i] = segment[2 * ind + 1][i] + segment[2 * ind + 2][i]; } } // to compute answer of a query // most of operation are same as update function void query(int l, int r, int low, int high, int ind, int k) { lazy[ind] %= k; if (lazy[ind] != 0) { if (low != high) { lazy[2 * ind + 1] += lazy[ind]; lazy[2 * ind + 2] += lazy[ind]; lazy[2 * ind + 1] %= k; lazy[2 * ind + 2] %= k; } int incr = lazy[ind]; vector<int> temp(k); for (int i = 0; i < k; i++) { temp[i] = segment[ind][i]; } for (int i = 0; i < k; i++) { segment[ind][(incr + i) % k] = temp[i]; } lazy[ind] = 0; } if (high < low || low > r || high < l) return; // this range is subset of our actual // require range so compute answer for // this range if (low >= l && high <= r) { for (int i = 0; i < k; i++) ans[i] += segment[ind][i]; return; } int mid = (low + high) >> 1; query(l, r, low, mid, 2 * ind + 1, k); query(l, r, mid + 1, high, 2 * ind + 2, k); } // after printing answer // reset ans array void print(int k) { for (int i = 0; i < k; i++) cout << ans[i] << " "; cout << "\n"; } void reset() { for (int i = 0; i < 51; i++) ans[i] = 0; } int main() { int arr[] = { 7, 13, 5, 9, 16, 21 }; int n = sizeof(arr) / sizeof(arr[0]); int q = 3, k = 4; // build segment tree build(arr, 0, n - 1, 0, k); // first query int x, l = 3, r = 5; query(l, r, 0, n - 1, 0, k); print(k); reset(); // second query l = 0, r = 4, x = 1; update(l, r, 0, n - 1, 0, k, x); // third query l = 2, r = 5; query(l, r, 0, n - 1, 0, k); print(k); reset(); return 0; } Output 1 2 0 0 
0 2 2 0 Time Complexity: O(Q*K*logN) Auxiliary Space: O(N*K) My Personal Notes arrow_drop_up Save Like Previous Find edge to be deleted from Tree to maximise product of XOR of components Next Count of connected components in given graph after removal of given Q vertices Recommended Articles Page : Count of ways to select exactly K non-disjoint ranges from given N ranges 10, Jul 21 Minimum operations to make counts of remainders same in an array 13, Feb 19 Queries to count sum of rows and columns of a Matrix present in given ranges 18, Mar 21 Count distinct median possible for an Array using given ranges of elements 12, Jun 20 Queries on probability of even or odd number in given ranges 19, Oct 17 Queries to minimize sum added to given ranges in an array to make their Bitwise AND non-zero 05, Nov 20 Queries for maximum and minimum difference between Fibonacci numbers in given ranges 10, Apr 20 Queries to find minimum absolute difference between adjacent array elements in given ranges 13, Aug 21 Queries to check if a number lies in N ranges of L-R 04, Oct 18 Minimum change in given value so that it lies in all given Ranges 31, Mar 20 Queries to count groups of N students possible having sum of ratings within given range 29, Oct 20 Count Primes in Ranges 27, Oct 17 C++ Program to Count Primes in Ranges 27, Dec 21 Java Program to Count Primes in Ranges 27, Dec 21 Python3 Program to Count Primes in Ranges 27, Dec 21 Php Program to Count Primes in Ranges 27, Dec 21 Javascript Program for Count Primes in Ranges 27, Dec 21 Find the missing elements from 1 to M in given N ranges 21, Nov 18 Find a range that covers all the elements of given N ranges 01, Dec 18 Find the kth element in the series generated by the given N ranges 18, Apr 19 Rearrange array elements excluded by given ranges to maximize sum of subarrays starting from the first index 09, Nov 20 Find an N-length Binary String having maximum sum of elements from given ranges 09, Jul 21 Maximum cost of a value over the range [1, N] such that values lies in at most K given ranges 08, Oct 21 Search an element in given N ranges 12, Mar 19 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Expert Easy Normal Medium Hard Expert Article Tags : array-range-queries Geeks-Premier-League-2022 Segment-Tree Arrays Geeks Premier League Tree Practice Tags : Arrays Tree Segment-Tree Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation View Details System Design-Live Classes for Working Professionals View Details Most popular in Arrays Trapping Rain Water Window Sliding Technique Program to find sum of elements in a given array Next Greater Element Move all negative numbers to beginning and positive to end with constant extra space Most visited in Geeks Premier League Best Way To Start Learning Core Java ? A Complete Roadmap 10 Tips For Landing Your Dream Internship Java Developer Learning Path ? A Complete Roadmap Implement Nested Routes in React.js - React Router DOM V6 Dagger Hilt in Android with Example ? 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials News Top News Technology Work & Career Business Finance Lifestyle Languages Python Java CPP Golang C# SQL Web Development Web Tutorials Django Tutorial HTML CSS JavaScript Bootstrap Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register